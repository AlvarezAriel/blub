// Filtering for the thickness texture.
#version 460

#include "../utilities.glsl"

layout(set = 2, binding = 0, r16f) uniform restrict image2D Dest;
layout(set = 2, binding = 1) uniform texture2D Source;
layout(push_constant) uniform PushConstants { uint FilterDirection; };

// Half filter size.
#define HALF_FILTER_SIZE 17
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Relationship between the standard deviation sigma (for gaussian kernel) and the filter size.
// (the lower, the boxier the filter gets)
#define FILTERSIZE_TO_SIGMA 0.3333

void main() {
    // TODO: Shared memory. Needs to be 1d filter aware, block layout is wrong for that right now.
    ivec2 screenCoord = ivec2(gl_GlobalInvocationID.xy);
    float thickness = texelFetch(Source, screenCoord, 0).r;
    if (thickness == 0.0) {
        return;
    }

    // TODO: Make depth aware for filter size?
    const float gaussianK = 0.5 / sq(HALF_FILTER_SIZE * FILTERSIZE_TO_SIGMA);

    float totalWeight = 1.0;

    for (int r = 1; r < HALF_FILTER_SIZE; ++r) {
        float gaussianWeight = exp(-sq(r) * gaussianK);

        ivec2 offset = ivec2(0);
        offset[FilterDirection] = r;

        float thicknessSample = texelFetch(Source, screenCoord + offset, 0).r;
        if (thicknessSample != 0.0) {
            thickness += thicknessSample * gaussianWeight;
            totalWeight += gaussianWeight;
        }
        thicknessSample = texelFetch(Source, screenCoord - offset, 0).r;
        if (thicknessSample != 0.0) {
            thickness += thicknessSample * gaussianWeight;
            totalWeight += gaussianWeight;
        }
    }

    thickness /= totalWeight;
    imageStore(Dest, screenCoord, thickness.rrrr);
}
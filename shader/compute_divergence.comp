// Computes velocity divergence of VelocityVolume

#version 450

#include "hybrid_fluid.glsl"
#include "per_frame_resources.glsl"
#include "utilities.glsl"

layout(set = 2, binding = 0) uniform texture3D VelocityVolume;
// layout(set = 2, binding = 1) uniform texture3D DivergenceVolume;
// layout(set = 2, binding = 2) uniform texture3D PressureVolumeRead;
layout(set = 2, binding = 3, r32f) uniform restrict image3D DivergenceVolume;

COMPUTE_PASS_VOLUME

void main() {
    ivec3 gridCoord = ivec3(gl_GlobalInvocationID);
    vec3 velocity = texelFetch(VelocityVolume, gridCoord, 0).xyz;

    float x0 = texelFetch(VelocityVolume, gridCoord - ivec3(1, 0, 0), 0).x;
    float x1 = texelFetch(VelocityVolume, gridCoord + ivec3(1, 0, 0), 0).x;
    float y0 = texelFetch(VelocityVolume, gridCoord - ivec3(0, 1, 0), 0).y;
    float y1 = texelFetch(VelocityVolume, gridCoord + ivec3(0, 1, 0), 0).y;
    float z0 = texelFetch(VelocityVolume, gridCoord - ivec3(0, 0, 1), 0).z;
    float z1 = texelFetch(VelocityVolume, gridCoord + ivec3(0, 0, 1), 0).z;
    float divergence = ((x1 - x0) + (y1 - y0) + (z1 - z0)) * 0.5;

    imageStore(DivergenceVolume, gridCoord, vec4(divergence));
}

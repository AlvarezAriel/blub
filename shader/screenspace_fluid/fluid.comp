#version 460

#include "../brdf.glsl"
#include "../fluid_render_info.glsl"
#include "../per_frame_resources.glsl"
#include "../utilities.glsl"

layout(set = 2, binding = 0) uniform texture2D FluidViewSpaceDepth;
layout(set = 2, binding = 1) uniform texture2D WaterDepthTexture;
layout(set = 2, binding = 2, HDR_BACKBUFFER_IMAGE_FORMAT) uniform restrict image2D BackbufferImage;

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

const float RefractionIndex_Water = 1.333;
const float RefractionIndex_Air = 1.00029;
const float RefractionAirToWater = RefractionIndex_Water / RefractionIndex_Air; // denoted as Î· (eta)

// from "Acquiring Scattering Properties of Participating Media by Dilution" (https://cseweb.ucsd.edu/~ravir/dilution.pdf)
// const vec3 HenyeyGreensteinParameterWater = vec3(0.902, 0.825, 0.914); // Pacific Ocean Surface Water
// const vec3 HenyeyGreensteinParameterWater = vec3(0.842, 0.865, 0.912); // Mission Bay Surface Water
const vec3 HenyeyGreensteinParameterWater = vec3(0.929, 0.910, 0.945); // Missian Bay 10ft deep

// Tried using values from "Acquiring Scattering Properties of Participating Media by Dilution" (https://cseweb.ucsd.edu/~ravir/dilution.pdf), but
// didn't work out well
// const vec3 ColorScatteringCoefficient = vec3(0.2415, 0.2762, 0.3256) * 0.1;                              // Denoted as sigma_s in PBRT
// const vec3 ColorExtinctionCoefficient = vec3(3.3623, 3.2929, 3.2193) * 0.1 + ColorScatteringCoefficient; // Denoted as sigma_t in PBRT
const vec3 ColorExtinctionCoefficient = vec3(0.46, 0.09, 0.06);

// Evaluates the refractive part of the rendering equation.
// (Technically also has lambert reflection)
vec3 computeRefraction(float waterDepth, vec3 toCamera, vec3 toLight, vec3 lightRadiance) {
    // TODO: Compute proper (faked) refraction
    vec3 refractionRayResult = imageLoad(BackbufferImage, ivec2(gl_GlobalInvocationID.xy)).xyz;
    // TODO: can we adjust thickness value to become a "seen water depth value"? Refraction vector goes through more water than this.
    float waterRefractionDepth = waterDepth * 50;

    // Relevant sources on the topic:
    // * https://mtnphil.wordpress.com/2012/09/15/water-shader-follow-up/
    // * PBR Book
    // * "GPU Gems 2, Chapter 13. Volumetric Light Scattering as a Post-Process"
    // https://developer.nvidia.com/gpugems/gpugems3/part-ii-light-and-shadows/chapter-13-volumetric-light-scattering-post-process
    // ... and others ;-).
    //
    // Transmittance/absorption is quite straight forward, but in-scattering I found hard to formulate:
    // Wanted something that works with a phase function (I did volume marching on a different project with that and that worked out very well),
    // but couldn't quite get my head around how to integrate over the whole volume.
    // Formula for scattering comes from "GPU Gems 2, Chapter 13. Volumetric Light Scattering as a Post-Process", formula 1

    vec3 colorExtinction = exp(-waterRefractionDepth * ColorExtinctionCoefficient); // Beer-Lambert law
    vec3 transmittedLight = colorExtinction * refractionRayResult;                  // The amount of light directly transmitted through the fluid.
    vec3 scatteredLight = (vec3(1.0) - colorExtinction) * evaluateHenyeyGreensteinPhaseFunction(HenyeyGreensteinParameterWater, toCamera, toLight) *
                          lightRadiance / ColorExtinctionCoefficient;

    return transmittedLight + scatteredLight;
}

// Evaluates the reflective part of the rendering equation.
vec3 computeReflection(vec3 normal, vec3 toCamera, vec3 toLight, vec3 lightRadiance) {
    // Using normalized blinn phong with single light direction right now.
    // Want to do something more interesting here later when having somethign to reflect.
    // Note that water reflections are mirror like so I believe there is no point in having a more complicated BRDF.
    const float BlinnPhongExponent = 16.0; // Maybe should vary this for foam later?
    return evaluateNormalizedBlinnPhong(BlinnPhongExponent, normal, toCamera, toLight) * lightRadiance * dot(toLight, normal);
}

void reconstructNormalAndPositionFromDepthbuffer(ivec2 screenCoord, vec2 screenPixelSize, out vec3 worldNormal, out vec3 worldPosition) {
    // Reconstruct normals as describe here:
    // https://wickedengine.net/2019/09/22/improved-normal-reconstruction-from-depth/
    // (Improved normal reconstruction from depth, Turanszkij, September 2019)
    // Btw. here is an even more thorough and expensive one: https://atyuwen.github.io/posts/normal-reconstruction/#fn:2

    ivec2 coordUp = screenCoord + ivec2(0, 1);
    ivec2 coordDown = screenCoord + ivec2(0, -1);
    ivec2 coordRight = screenCoord + ivec2(1, 0);
    ivec2 coordLeft = screenCoord + ivec2(-1, 0);

    // TODO: Shared memory for fetching depth.
    float depthCenter = texelFetch(FluidViewSpaceDepth, screenCoord, 0).r;
    worldPosition = reconstructWorldPositionFromViewSpaceDepth(screenCoord * screenPixelSize, depthCenter);
    float depthUp = texelFetch(FluidViewSpaceDepth, coordUp, 0).r;
    float depthRight = texelFetch(FluidViewSpaceDepth, coordRight, 0).r;
    float depthDown = texelFetch(FluidViewSpaceDepth, coordDown, 0).r;
    float depthLeft = texelFetch(FluidViewSpaceDepth, coordLeft, 0).r;

    uint bestDepthHorizontal = abs(depthRight - depthCenter) < abs(depthLeft - depthCenter) ? 1 : 2;
    uint bestDepthVertical = abs(depthDown - depthCenter) < abs(depthUp - depthCenter) ? 3 : 4;

    // TODO: Simplify
    vec3 p1;
    vec3 p2;
    if (bestDepthHorizontal == 1 && bestDepthVertical == 4) {
        p1 = reconstructWorldPositionFromViewSpaceDepth(coordRight * screenPixelSize, depthRight);
        p2 = reconstructWorldPositionFromViewSpaceDepth(coordUp * screenPixelSize, depthUp);
    } else if (bestDepthHorizontal == 1 && bestDepthVertical == 3) {
        p1 = reconstructWorldPositionFromViewSpaceDepth(coordDown * screenPixelSize, depthDown);
        p2 = reconstructWorldPositionFromViewSpaceDepth(coordRight * screenPixelSize, depthRight);
    } else if (bestDepthHorizontal == 2 && bestDepthVertical == 4) {
        p1 = reconstructWorldPositionFromViewSpaceDepth(coordUp * screenPixelSize, depthUp);
        p2 = reconstructWorldPositionFromViewSpaceDepth(coordLeft * screenPixelSize, depthLeft);
    } else { // if (bestDepthHorizontal == 2 && bestDepthVertical == 3)
        p1 = reconstructWorldPositionFromViewSpaceDepth(coordLeft * screenPixelSize, depthLeft);
        p2 = reconstructWorldPositionFromViewSpaceDepth(coordDown * screenPixelSize, depthDown);
    }

    // Classic version
    // p1 = reconstructWorldPositionFromViewSpaceDepth(coordRight * screenPixelSize, depthRight);
    // p2 = reconstructWorldPositionFromViewSpaceDepth(coordUp * screenPixelSize, depthUp);

    worldNormal = normalize(cross(p2 - worldPosition, p1 - worldPosition));
}

void main() {
    ivec2 screenCoord = ivec2(gl_GlobalInvocationID.xy);
    float waterDepth = texelFetch(WaterDepthTexture, screenCoord, 0).r;
    if (waterDepth == 0.0)
        return;

    vec3 GlobalDirLightDirection = normalize(vec3(-1.0, 0.5, 0.5));
    vec3 GlobalDirLightColor = vec3(1.64, 1.27, 0.99);

    vec2 screenPixelSize = vec2(1.0) / textureSize(FluidViewSpaceDepth, 0).xy;

    // Normal/Position (world coords)
    vec3 normal;
    vec3 position;
    reconstructNormalAndPositionFromDepthbuffer(screenCoord, screenPixelSize, normal, position);

    // vector to camera and camera distance
    vec3 toCamera = Camera.Position - position;
    float cameraDistance = length(toCamera);
    toCamera /= cameraDistance;

    // Color components.
    vec3 refractionColor = computeRefraction(waterDepth, toCamera, GlobalDirLightDirection, GlobalDirLightColor);
    vec3 reflectionColor = computeReflection(normal, toCamera, GlobalDirLightDirection, GlobalDirLightColor); // todo, cubemap/screenspace reflection

    // Combine Refraction & Reflection & Specular
    float nDotV = dot(normal, toCamera);
    float fresnel = fresnelDielectricDielectric(nDotV, RefractionAirToWater);
    vec3 color = mix(refractionColor, reflectionColor, fresnel);

    imageStore(BackbufferImage, screenCoord, vec4(color, 1.0));
}
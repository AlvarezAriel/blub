// Subtracts pressure gradient from velocity volume to make it divergence free.
// (applies pressure forces)

#version 450

#include "../utilities.glsl"
#include "bindings_write_particles_volume.glsl"

COMPUTE_PASS_VOLUME

void main() {
    vec3 velocityGridPosition = vec3(gl_GlobalInvocationID);
    ivec3 gridCoord = ivec3(gl_GlobalInvocationID);

    vec4 velocity = imageLoad(VelocityVolume, gridCoord);

    // Compute pressure gradient with central differences
    float pressureAtCenter = texelFetch(PressureVolume, gridCoord, 0).x;
    float pressurePosX = texelFetch(PressureVolume, gridCoord + ivec3(1, 0, 0), 0).x;
    float pressurePosY = texelFetch(PressureVolume, gridCoord + ivec3(0, 1, 0), 0).x;
    float pressurePosZ = texelFetch(PressureVolume, gridCoord + ivec3(0, 0, 1), 0).x;

    velocity.x -= pressurePosX - pressureAtCenter;
    velocity.y -= pressurePosY - pressureAtCenter;
    velocity.z -= pressurePosZ - pressureAtCenter;

    // Reinforce boundary condition (any pressure sampled in solids was garbage)
    // TODO: Can't sample marker grid right now because it's one with the velocity grid which we're writing here.
    ivec3 gridSize = ivec3(textureSize(PressureVolume, 0));
    velocity.xyz = enforceGlobalWallBoundaryCondition(velocity.xyz, gridCoord, gridSize);

    // Write result.
    // TODO: skip write if not needed?
    imageStore(VelocityVolume, gridCoord, velocity);
}
// Computes velocity divergence of VelocityVolume

#version 450

#include "hybrid_fluid.glsl"
#include "per_frame_resources.glsl"
#include "utilities.glsl"

layout(set = 2, binding = 0) uniform texture3D VelocityVolume;
// layout(set = 2, binding = 1) uniform texture3D DivergenceVolume;
// layout(set = 2, binding = 2) uniform texture3D PressureVolumeRead;
layout(set = 2, binding = 3, r32f) uniform restrict image3D DivergenceVolume;

COMPUTE_PASS_VOLUME

void main() {
    ivec3 gridCoord = ivec3(gl_GlobalInvocationID);
    float divergence = 0.0;

    // Don't compute divergence if there's no fluid
    // (Divergence tells us how much fluid is going in/out. If there's air/solid, then that's clearly zero!)
    vec4 currentCellStaggeredVelocities = texelFetch(VelocityVolume, gridCoord, 0);
    [[dont_flatten]] if (currentCellStaggeredVelocities.w == CELL_FLUID) {
        divergence += currentCellStaggeredVelocities.x - texelFetch(VelocityVolume, gridCoord - ivec3(1, 0, 0), 0).x;
        divergence += currentCellStaggeredVelocities.y - texelFetch(VelocityVolume, gridCoord - ivec3(0, 1, 0), 0).y;
        divergence += currentCellStaggeredVelocities.z - texelFetch(VelocityVolume, gridCoord - ivec3(0, 0, 1), 0).z;
    }

    imageStore(DivergenceVolume, gridCoord, divergence.xxxx);
}

// Subtracts pressure gradient from velocity volume to make it divergence free.
// (applies pressure forces)

#version 450

#include "../utilities.glsl"
#include "bindings_write_volume.glsl"

COMPUTE_PASS_VOLUME

float computeCorrectedVelocityForDirection(ivec3 coord, float pressureAtCenter, float currentCellStaggeredVelocity, const uint component) {
    coord[component] += 1;

    float neighborType = texelFetch(MarkerVolume, coord, 0).x;
    float neighborPressure = neighborType == CELL_FLUID ? texelFetch(PressureVolume, coord, 0).x : 0.0;

    [[flatten]] if (neighborType == CELL_SOLID) {
        // At boundary cells the pressure should be such that fluid_velocity * boundary_normal == boundary_velocity * boundary_normal
        // No support for non-static boundary yet
        // -> No flow between boundary and non-boundary allowed.
        // To avoid sticking to walls we allow velocity away from it even though it violates continuity equations.
        return min(0.0, currentCellStaggeredVelocity);
    }
    else {
        return currentCellStaggeredVelocity - (pressureAtCenter - neighborPressure);
    }
}

void main() {
    vec3 velocityGridPosition = vec3(gl_GlobalInvocationID);
    ivec3 gridCoord = ivec3(gl_GlobalInvocationID);

    float cellType = texelFetch(MarkerVolume, gridCoord, 0).x;
    if (cellType != CELL_FLUID)
        return;

    float pressureAtCenter = texelFetch(PressureVolume, gridCoord, 0).x;
    {
        float velocity = imageLoad(VelocityVolumeX, gridCoord).x;
        velocity = computeCorrectedVelocityForDirection(gridCoord, pressureAtCenter, velocity, 0);
        imageStore(VelocityVolumeX, gridCoord, velocity.xxxx);
    }
    {
        float velocity = imageLoad(VelocityVolumeY, gridCoord).x;
        velocity = computeCorrectedVelocityForDirection(gridCoord, pressureAtCenter, velocity, 1);
        imageStore(VelocityVolumeY, gridCoord, velocity.xxxx);
    }
    {
        float velocity = imageLoad(VelocityVolumeZ, gridCoord).x;
        velocity = computeCorrectedVelocityForDirection(gridCoord, pressureAtCenter, velocity, 2);
        imageStore(VelocityVolumeZ, gridCoord, velocity.xxxx);
    }
}
// Pressure (PPE) solving iteration
// we're solving a pseudo pressure which is (density / deltaTime * pressure)

#version 450

#include "../per_frame_resources.glsl"
#include "../utilities.glsl"
#include "hybrid_fluid.glsl"

layout(set = 2, binding = 0) uniform texture3D VelocityVolume;
layout(set = 2, binding = 1) uniform texture3D DivergenceVolume;
layout(set = 2, binding = 2) uniform texture3D PressureVolumeRead;
layout(set = 2, binding = 3, r32f) uniform restrict image3D PressureVolumeWrite;

COMPUTE_PASS_VOLUME

void main() {
    ivec3 gridCoord = ivec3(gl_GlobalInvocationID);

    // Inside...
    // Air cells: Pressure is zero (could be any constant value really)
    // Solid cells: Not defined!
    //      But for easier derivation we can just set imagine to set it to a value that would cause the velocity at the fluid/solid interface to fulfill the boundary condition.
    //      Note that this means though that we have different pressure values for every boundary face.
    //      For details check out chapter 4.1 in Bridson's SIGGRAPH2007 course notes https://www.cs.ubc.ca/~rbridson/fluidsimulation/fluids_notes.pdf

    // Boundary conditions:
    // Air: Dirichlet (-> pressure is set to zero)
    // Solid: Neumann (-> velocity of fluid is boundary velocity -> pressure gradient is negative boundary velocity)

    // Is this a fluid cell?
    if (texelFetch(VelocityVolume, gridCoord, 0).w != CELL_FLUID) {
        // Since we don't have a specific clear pass, we need to clear pressure out here.
        // TODO: Shown that this costs us perf as we do many pressure iterations, we're doing this write a lot
        // Check remove_divergence.comp on how we deal with pressure in CELL_SOLID
        imageStore(PressureVolumeWrite, gridCoord, vec4(0.0));
        return;
    }

    uvec3 maxGridCoord = textureSize(VelocityVolume, 0) - uvec3(1);

    // jacobi iteration
    float divergence = texelFetch(DivergenceVolume, gridCoord, 0).x;
    float markerX0 = texelFetch(VelocityVolume, gridCoord - ivec3(1, 0, 0), 0).w;
    float markerX1 = texelFetch(VelocityVolume, gridCoord + ivec3(1, 0, 0), 0).w;
    float markerY0 = texelFetch(VelocityVolume, gridCoord - ivec3(0, 1, 0), 0).w;
    float markerY1 = texelFetch(VelocityVolume, gridCoord + ivec3(0, 1, 0), 0).w;
    float markerZ0 = texelFetch(VelocityVolume, gridCoord - ivec3(0, 0, 1), 0).w;
    float markerZ1 = texelFetch(VelocityVolume, gridCoord + ivec3(0, 0, 1), 0).w;

    float numNonSolid = 6.0;
    if (markerX0 == CELL_SOLID)
        numNonSolid -= 1.0;
    if (markerX1 == CELL_SOLID)
        numNonSolid -= 1.0;
    if (markerY0 == CELL_SOLID)
        numNonSolid -= 1.0;
    if (markerY1 == CELL_SOLID)
        numNonSolid -= 1.0;
    if (markerZ0 == CELL_SOLID)
        numNonSolid -= 1.0;
    if (markerZ1 == CELL_SOLID)
        numNonSolid -= 1.0;
    if (numNonSolid == 0.0)
        return;

    float pressureX0 = markerX0 == CELL_FLUID ? texelFetch(PressureVolumeRead, gridCoord - ivec3(1, 0, 0), 0).x : 0.0;
    float pressureX1 = markerX1 == CELL_FLUID ? texelFetch(PressureVolumeRead, gridCoord + ivec3(1, 0, 0), 0).x : 0.0;
    float pressureY0 = markerY0 == CELL_FLUID ? texelFetch(PressureVolumeRead, gridCoord - ivec3(0, 1, 0), 0).x : 0.0;
    float pressureY1 = markerY1 == CELL_FLUID ? texelFetch(PressureVolumeRead, gridCoord + ivec3(0, 1, 0), 0).x : 0.0;
    float pressureZ0 = markerZ0 == CELL_FLUID ? texelFetch(PressureVolumeRead, gridCoord - ivec3(0, 0, 1), 0).x : 0.0;
    float pressureZ1 = markerZ1 == CELL_FLUID ? texelFetch(PressureVolumeRead, gridCoord + ivec3(0, 0, 1), 0).x : 0.0;

    float newPressure = (pressureX0 + pressureX1 + pressureY0 + pressureY1 + pressureZ0 + pressureZ1 - divergence) / numNonSolid;

    imageStore(PressureVolumeWrite, gridCoord, vec4(newPressure));
}

#version 450

#include "../per_frame_resources.glsl"
#include "../utilities.glsl"
#include "hybrid_fluid.glsl"
#include "particles.glsl"

layout(set = 2, binding = 0) buffer restrict ParticleBuffer { Particle Particles[]; };
layout(set = 2, binding = 1) uniform texture3D VelocityVolume;
layout(set = 2, binding = 2) uniform utexture3D MarkerVolume;

COMPUTE_PASS_PARTICLES

vec3 InterpolateTrilinear(vec3 v_000, vec3 v_100, vec3 v_010, vec3 v_110, vec3 v_001, vec3 v_101, vec3 v_011, vec3 v_111, vec3 interpolantsX,
                          vec3 interpolantsY, vec3 interpolantsZ) {
    return mix(mix(mix(v_000, v_100, interpolantsX), mix(v_010, v_110, interpolantsX), interpolantsY),
               mix(mix(v_001, v_101, interpolantsX), mix(v_011, v_111, interpolantsX), interpolantsY), interpolantsZ);
}

float sampleVelocity(ivec3 coord, uint component, float centerValue) { return texelFetch(VelocityVolume, coord, 0)[component]; }

void main() {
    uint particleIndex = gl_GlobalInvocationID.x;
    if (particleIndex >= NumParticles)
        return;

    vec3 gridSize = textureSize(VelocityVolume, 0);
    vec3 gridTexelSizeNormalized = 1.0 / gridSize;

    // Sample all 8 neighboring velocity grid cells
    //
    // Notes from experimentation with texture sampling:
    // * texelFetch is either slower or as fast. Previously allowed particles outside the volume in which case it was better since we got boundaries
    // for free wiht SamplerPointClamp
    // * using linear sampler repeatedly (6x linear sample instead of 8x direct sample + manual interpolate) is indeed slower
    // (as one would hope for sanity's sake :))
    vec3 originalPosition = Particles[particleIndex].Position;
    vec3 offsetPositions[] = {
        max(vec3(0.0), originalPosition - vec3(1.0, 0.5, 0.5)),
        max(vec3(0.0), originalPosition - vec3(0.5, 1.0, 0.5)),
        max(vec3(0.0), originalPosition - vec3(0.5, 0.5, 1.0)),
    };

    vec3 centerVelocities = texelFetch(VelocityVolume, ivec3(originalPosition), 0).xyz;

    vec3 v_000, v_100, v_010, v_110, v_001, v_101, v_011, v_111;
    [[unroll]] for (int i = 0; i < 3; ++i) {
        ivec3 volumeCoordMin = ivec3(offsetPositions[i]);
        ivec3 volumeCoordMax = min(volumeCoordMin + ivec3(1, 1, 1), ivec3(gridSize - ivec3(1)));

        v_000[i] = sampleVelocity(volumeCoordMin, i, centerVelocities[i]);
        v_100[i] = sampleVelocity(ivec3(volumeCoordMax.x, volumeCoordMin.yz), i, centerVelocities[i]);
        v_010[i] = sampleVelocity(ivec3(volumeCoordMin.x, volumeCoordMax.y, volumeCoordMin.z), i, centerVelocities[i]);
        v_110[i] = sampleVelocity(ivec3(volumeCoordMax.xy, volumeCoordMin.z), i, centerVelocities[i]);
        v_001[i] = sampleVelocity(ivec3(volumeCoordMin.xy, volumeCoordMax.z), i, centerVelocities[i]);
        v_101[i] = sampleVelocity(ivec3(volumeCoordMax.x, volumeCoordMin.y, volumeCoordMax.z), i, centerVelocities[i]);
        v_011[i] = sampleVelocity(ivec3(volumeCoordMin.x, volumeCoordMax.yz), i, centerVelocities[i]);
        v_111[i] = sampleVelocity(volumeCoordMax, i, centerVelocities[i]);
    }

    // Update velocity and the APIC affine matrix.
    // Trilinear interpolation for velocity.
    vec3 interpolantsX = fract(offsetPositions[0]);
    vec3 interpolantsY = fract(offsetPositions[1]);
    vec3 interpolantsZ = fract(offsetPositions[2]);
    vec3 v_x00 = mix(v_000, v_100, interpolantsX);
    vec3 v_x01 = mix(v_001, v_101, interpolantsX);
    vec3 v_x10 = mix(v_010, v_110, interpolantsX);
    vec3 v_x11 = mix(v_011, v_111, interpolantsX);
    vec3 v_xy0 = mix(v_x00, v_x10, interpolantsY);
    vec3 v_xy1 = mix(v_x01, v_x11, interpolantsY);
    vec3 newVelocity = mix(v_xy0, v_xy1, interpolantsZ);
    // The Apic Matrix is the jacobi matrix of the velocity for fluids.
    vec3 cx = mix(mix(v_100, v_110, interpolantsY), mix(v_101, v_111, interpolantsY), interpolantsZ) -
              mix(mix(v_000, v_010, interpolantsY), mix(v_001, v_011, interpolantsY), interpolantsZ);
    vec3 cy = mix(v_x10, v_x11, interpolantsZ) - mix(v_x00, v_x01, interpolantsZ);
    vec3 cz = v_xy1 - v_xy0;

    // Advect with Runge Kutta 4
    // confined to current cell for which we know velocities are defined and we already sampled all corners - which makes this relatively cheap.
    vec3 k1 = newVelocity;
    vec3 stepK2 = Time.SimulationDelta * 0.5 * k1;
    vec3 k2 = InterpolateTrilinear(v_000, v_100, v_010, v_110, v_001, v_101, v_011, v_111, saturate(interpolantsX + stepK2),
                                   saturate(interpolantsY + stepK2), saturate(interpolantsZ + stepK2));
    vec3 stepK3 = Time.SimulationDelta * 0.5 * k2;
    vec3 k3 = InterpolateTrilinear(v_000, v_100, v_010, v_110, v_001, v_101, v_011, v_111, saturate(interpolantsX + stepK3),
                                   saturate(interpolantsY + stepK3), saturate(interpolantsZ + stepK3));
    vec3 stepK4 = Time.SimulationDelta * k3;
    vec3 k4 = InterpolateTrilinear(v_000, v_100, v_010, v_110, v_001, v_101, v_011, v_111, saturate(interpolantsX + stepK4),
                                   saturate(interpolantsY + stepK4), saturate(interpolantsZ + stepK4));
    vec3 totalMovement = Time.SimulationDelta * (1.0 / 6.0) * (k1 + 2.0 * (k2 + k3) + k4);
    // vec3 totalMovement = newVelocity * Time.SimulationDelta; // Euler integration

    // Enforce boundary.
    // Moving particle back a bit resulted in a lot of sticky particles that are hard to get rid of.
    // vec3 clampedMovement = clamp(originalPosition + totalMovement, boundaryMin, boundaryMax) - originalPosition;
    // vec3 clampRatio = clampedMovement / totalMovement;
    // float clampFactor = min(min(clampRatio.x, clampRatio.y), clampRatio.z);
    vec3 newPosition = clamp(originalPosition + totalMovement, vec3(1.0001), gridSize - vec3(0.0001));

    // Write out particle.
    Particles[particleIndex].Position = newPosition;
    Particles[particleIndex].VelocityMatrix[0] = vec4(cx, newVelocity.x);
    Particles[particleIndex].VelocityMatrix[1] = vec4(cy, newVelocity.y);
    Particles[particleIndex].VelocityMatrix[2] = vec4(cz, newVelocity.z);
    // PIC only
    // Particles[particleIndex].VelocityMatrix[0] = vec4(vec3(0), newVelocity.x);
    // Particles[particleIndex].VelocityMatrix[1] = vec4(vec3(0), newVelocity.y);
    // Particles[particleIndex].VelocityMatrix[2] = vec4(vec3(0), newVelocity.z);
}
// Pressure & residual update

#version 460

#include "pressure.glsl"

layout(set = 1, binding = 0, r32f) uniform restrict image3D Pressure;
layout(set = 1, binding = 1, r32f) uniform restrict image3D Residual;
layout(set = 1, binding = 2) uniform texture3D Search;
layout(set = 1, binding = 3) uniform PcgScalars_ { PcgScalars Scalars; };

#define PRUPDATE_LAST_ITERATION 1

COMPUTE_PASS_VOLUME

void main() {
    ivec3 gridCoord = ivec3(gl_GlobalInvocationID);
    float marker = texelFetch(MarkerVolume, gridCoord, 0).x; // Empirically this test + skip is a speedup!
    if (marker != CELL_FLUID) {
        return;
    }

    float search = texelFetch(Search, gridCoord, 0).x;
    float alpha = Scalars.AlphaBeta;

    // Update pressure
    {
        float pressureBefore = imageLoad(Pressure, gridCoord).x;
        imageStore(Pressure, gridCoord, (pressureBefore + alpha * search).xxxx);
    }

    if (PushConstants.Mode == PRUPDATE_LAST_ITERATION)
        return;

    // Update residual
    // This is usually r = r - a * z, but we didn't store z!
    // So it's r = r - a * As
    //
    // Duplicating the work here is still faster since we saved on 2 reads and 1 write earlier
    // by merging initial dotproduct calculation (scalar multiply) into calculating As earlier.
    // (empirically confirmed)
    {
        float residualBefore = imageLoad(Residual, gridCoord).x;
        float searchTimesA = MultiplyWithCoefficientMatrix(gridCoord, Search, search); // The auxillary z!
        imageStore(Residual, gridCoord, (residualBefore - alpha * searchTimesA).xxxx);
    }
}

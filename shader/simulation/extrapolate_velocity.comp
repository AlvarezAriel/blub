// Extrapolates velocity into air and solid for easy access in particle update
// Note that we can run the extrapolation pass only once since we don't double buffer markers.

#version 450

#include "bindings_write_volume.glsl"

COMPUTE_PASS_VOLUME

// Total of 2 passes
// Don't need to update markers on last pass!
layout(push_constant) uniform PushConstants { uint PassIndex; };

    // Extrapolate is super racy! TODO
    // Boundary conditions! TODO

#define accumulateNeighbor(velocityVolume, dir)                                                                                                      \
    {                                                                                                                                                \
        ivec3 neighborCoord = gridCoord + dir;                                                                                                       \
        if (all(greaterThanEqual(neighborCoord, ivec3(0))) && all(lessThan(neighborCoord, imageSize(velocityVolume)))) {                             \
            float v = imageLoad(velocityVolume, neighborCoord).x;                                                                                    \
            if (!isnan(v)) {                                                                                                                         \
                weight += 1.0;                                                                                                                       \
                velocity += v;                                                                                                                       \
            }                                                                                                                                        \
        }                                                                                                                                            \
    }

#define extrapolateInDirection(velocityVolume, dir, cellType, gridCoord)                                                                             \
    {                                                                                                                                                \
        float cellTypePos = texelFetch(MarkerVolume, gridCoord + dir, 0).x;                                                                          \
        if (cellType != CELL_FLUID && cellTypePos != CELL_FLUID) {                                                                                   \
            float velocity = 0.0;                                                                                                                    \
            float weight = 0.0;                                                                                                                      \
            accumulateNeighbor(velocityVolume, ivec3(1, 0, 0));                                                                                      \
            accumulateNeighbor(velocityVolume, ivec3(0, 1, 0));                                                                                      \
            accumulateNeighbor(velocityVolume, ivec3(0, 0, 1));                                                                                      \
            accumulateNeighbor(velocityVolume, ivec3(-1, 0, 0));                                                                                     \
            accumulateNeighbor(velocityVolume, ivec3(0, -1, 0));                                                                                     \
            accumulateNeighbor(velocityVolume, ivec3(0, 0, -1));                                                                                     \
            if (weight > 0.0) {                                                                                                                      \
                imageStore(velocityVolume, gridCoord, velocity.xxxx / weight);                                                                       \
            }                                                                                                                                        \
        }                                                                                                                                            \
    }

void main() {
    // TODO: Using on-the-fly interpolation for the moment.
    return;

    ivec3 gridCoord = ivec3(gl_GlobalInvocationID);

    float cellType = texelFetch(MarkerVolume, gridCoord, 0).x;
    extrapolateInDirection(VelocityVolumeX, ivec3(1, 0, 0), cellType, gridCoord);
    extrapolateInDirection(VelocityVolumeY, ivec3(0, 1, 0), cellType, gridCoord);
    extrapolateInDirection(VelocityVolumeZ, ivec3(0, 0, 1), cellType, gridCoord);
}
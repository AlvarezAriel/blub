// Applies coefficient matrix A to Search (s) and starts dotproduct (component-wise multiply) searchTimesA with original Search (s)

#version 460

#include "pressure.glsl"

layout(set = 2, binding = 0) buffer restrict DotProduct { float DotProductBuffer[]; };
layout(set = 2, binding = 1) uniform texture3D Search;

COMPUTE_PASS_VOLUME

void main() {
    ivec3 gridCoord = ivec3(gl_GlobalInvocationID);
    float marker = texelFetch(MarkerVolume, gridCoord, 0).x;

    // TODO: Not a great write pattern
    uvec3 dispatchSize = gl_WorkGroupSize * gl_NumWorkGroups;
    uint dotProductBufferAddress =
        gl_GlobalInvocationID.z * dispatchSize.x * dispatchSize.y + gl_GlobalInvocationID.y * dispatchSize.x + gl_GlobalInvocationID.x;

    if (marker != CELL_FLUID) {
        DotProductBuffer[dotProductBufferAddress] = 0; // TODO: Do this only once.
        return;
    }

    float searchValue = texelFetch(Search, gridCoord, 0).x;
    float searchTimesA = MultiplyWithCoefficientMatrix(gridCoord, Search, searchValue);

    DotProductBuffer[dotProductBufferAddress] = searchValue * searchTimesA;
}

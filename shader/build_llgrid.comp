// Builds linked lists of particles into the linked list dual grid.

#version 450

// particle access doesn't need to be coherent since every invocation is only accessing it's own.
#define PARTICLE_WRITEACCESS
// Not entirely sure here: I'm arguing that if there's no memory coherency,
// then imageAtomicExchange _could_ work on outdated memory that is not synced with other invocations, i.e. working on outdated data.
#define LLGRID_WRITEACCESS coherent

#include "fluid_volumes.glsl"
#include "particles.glsl"
#include "per_frame_resources.glsl"

COMPUTE_PASS_PARTICLES

void main() {
    uint particleIndex = gl_GlobalInvocationID.x;
    if (particleIndex >= NumParticles)
        return;

    vec3 position = Particles[particleIndex].Position;
    ivec3 nearestDualGridCell = ivec3(position);

    // Remember, indices in grid are offset by +1.
    Particles[particleIndex].LinkedListNext = imageAtomicExchange(LinkedListDualGrid, nearestDualGridCell, particleIndex + 1) - 1;
}